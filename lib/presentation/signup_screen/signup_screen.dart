import 'bloc/signup_bloc.dart';import 'models/signup_model.dart';import 'package:flutter/material.dart';import 'package:indus_motors/core/app_export.dart';import 'package:indus_motors/core/utils/validation_functions.dart';import 'package:indus_motors/widgets/custom_elevated_button.dart';import 'package:indus_motors/widgets/custom_text_form_field.dart';
// ignore_for_file: must_be_immutable
class SignupScreen extends StatelessWidget {SignupScreen({Key? key}) : super(key: key);

GlobalKey<FormState> _formKey = GlobalKey<FormState>();

static Widget builder(BuildContext context) { return BlocProvider<SignupBloc>(create: (context) => SignupBloc(SignupState(signupModelObj: SignupModel()))..add(SignupInitialEvent()), child: SignupScreen()); } 
@override Widget build(BuildContext context) { return SafeArea(child: Scaffold(resizeToAvoidBottomInset: false, body: Form(key: _formKey, child: Container(width: double.maxFinite, padding: EdgeInsets.symmetric(horizontal: 27.h), child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [Text("lbl_sign_up2".tr, style: theme.textTheme.displayMedium), SizedBox(height: 48.v), _buildEmail(context), SizedBox(height: 19.v), _buildName1(context), SizedBox(height: 16.v), _buildPassword(context), SizedBox(height: 16.v), _buildConfirmpassword(context), SizedBox(height: 65.v), _buildCreateAccount(context), SizedBox(height: 32.v), Align(alignment: Alignment.centerRight, child: GestureDetector(onTap: () {onTapTxtAlreadyhaveaccount(context);}, child: Padding(padding: EdgeInsets.only(right: 49.h), child: RichText(text: TextSpan(children: [TextSpan(text: "msg_already_have_account2".tr, style: CustomTextStyles.bodyMediumLight), TextSpan(text: "lbl_login2".tr, style: CustomTextStyles.bodyMediumPrimaryLight)]), textAlign: TextAlign.left)))), SizedBox(height: 5.v)]))))); } 
/// Section Widget
Widget _buildEmail(BuildContext context) { return BlocSelector<SignupBloc, SignupState, TextEditingController?>(selector: (state) => state.emailController, builder: (context, emailController) {return CustomTextFormField(controller: emailController, hintText: "lbl_email".tr, hintStyle: CustomTextStyles.bodyMediumBlack900, textInputType: TextInputType.emailAddress, validator: (value) {if (value == null || (!isValidEmail(value, isRequired: true))) {return "err_msg_please_enter_valid_email".tr;} return null;}, borderDecoration: TextFormFieldStyleHelper.fillBlueGray1);}); } 
/// Section Widget
Widget _buildName(BuildContext context) { return BlocSelector<SignupBloc, SignupState, TextEditingController?>(selector: (state) => state.nameController, builder: (context, nameController) {return CustomTextFormField(width: 134.h, controller: nameController, hintText: "lbl_name".tr, hintStyle: CustomTextStyles.bodyMediumBlack90013, validator: (value) {if (!isText(value)) {return "err_msg_please_enter_valid_text".tr;} return null;}, borderDecoration: TextFormFieldStyleHelper.fillBlueGray1);}); } 
/// Section Widget
Widget _buildCustomerId(BuildContext context) { return BlocSelector<SignupBloc, SignupState, TextEditingController?>(selector: (state) => state.customerIdController, builder: (context, customerIdController) {return CustomTextFormField(width: 143.h, controller: customerIdController, hintText: "lbl_customer_id".tr, hintStyle: CustomTextStyles.bodyMediumBlack900, borderDecoration: TextFormFieldStyleHelper.fillBlueGray1);}); } 
/// Section Widget
Widget _buildName1(BuildContext context) { return Padding(padding: EdgeInsets.only(left: 3.h), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [_buildName(context), _buildCustomerId(context)])); } 
/// Section Widget
Widget _buildPassword(BuildContext context) { return BlocSelector<SignupBloc, SignupState, TextEditingController?>(selector: (state) => state.passwordController, builder: (context, passwordController) {return CustomTextFormField(controller: passwordController, hintText: "lbl_password".tr, hintStyle: CustomTextStyles.bodyMediumBlack900, textInputType: TextInputType.visiblePassword, validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "err_msg_please_enter_valid_password".tr;} return null;}, obscureText: true, borderDecoration: TextFormFieldStyleHelper.fillBlueGray1);}); } 
/// Section Widget
Widget _buildConfirmpassword(BuildContext context) { return BlocSelector<SignupBloc, SignupState, TextEditingController?>(selector: (state) => state.confirmpasswordController, builder: (context, confirmpasswordController) {return CustomTextFormField(controller: confirmpasswordController, hintText: "msg_confirm_password".tr, hintStyle: CustomTextStyles.bodyMediumBlack900, textInputAction: TextInputAction.done, textInputType: TextInputType.visiblePassword, validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "err_msg_please_enter_valid_password".tr;} return null;}, obscureText: true, borderDecoration: TextFormFieldStyleHelper.fillBlueGray1);}); } 
/// Section Widget
Widget _buildCreateAccount(BuildContext context) { return CustomElevatedButton(text: "lbl_create_account".tr, buttonStyle: CustomButtonStyles.fillPrimary, buttonTextStyle: CustomTextStyles.titleMediumWhiteA700, onPressed: () {onTapCreateAccount(context);}); } 
/// Navigates to the otpscreenScreen when the action is triggered.
onTapCreateAccount(BuildContext context) { NavigatorService.pushNamed(AppRoutes.otpscreenScreen, ); } 
/// Navigates to the signinScreen when the action is triggered.
onTapTxtAlreadyhaveaccount(BuildContext context) { NavigatorService.pushNamed(AppRoutes.signinScreen, ); } 
 }
